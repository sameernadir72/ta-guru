{"version":3,"file":"static/js/990.4b1325f1.chunk.js","mappings":"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","sources":["webpack://berry-material-react-free/./src/views/create/Create.module.css?25e3","views/Resume/Resume.js","views/create/chatBot/ques.js","views/create/chatBot/ChatBot.js","views/create/Create.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Create_container__kOpo5\",\"header\":\"Create_header__wsDhm\",\"section\":\"Create_section__jPxeA\",\"active\":\"Create_active__JsywL\",\"body\":\"Create_body__Ww4Tu\",\"detail\":\"Create_detail__MPFl0\",\"row\":\"Create_row__94shr\",\"column\":\"Create_column__jEuAl\",\"chips\":\"Create_chips__TqQVl\",\"new\":\"Create_new__81WK2\",\"chip\":\"Create_chip__uOyrb\"};","import React, { forwardRef, useEffect, useRef, useState } from 'react';\nimport { AtSign, Calendar, GitHub, Linkedin, MapPin, Paperclip, Phone } from 'react-feather';\n\nimport styles from './Resume.module.css';\n\nconst Resume = forwardRef((props, ref) => {\n    console.log({ props });\n    console.log({ ref });\n    const information = props.information;\n    const sections = props.sections;\n    const containerRef = useRef();\n\n    const [columns, setColumns] = useState([[], []]);\n    const [source, setSource] = useState('');\n    const [target, seTarget] = useState('');\n\n    const info = {\n        workExp: information[sections.workExp],\n        // project: information[sections.project],\n        achievement: information[sections.achievement],\n        education: information[sections.education],\n        basicInfo: information[sections.basicInfo],\n        summary: information[sections.summary],\n        other: information[sections.other]\n    };\n\n    const getFormattedDate = (value) => {\n        if (!value) return '';\n        const date = new Date(value);\n\n        return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n    };\n\n    const sectionDiv = {\n        [sections.workExp]: (\n            <div\n                key={'workexp'}\n                draggable\n                onDragOver={() => seTarget(info.workExp?.id)}\n                onDragEnd={() => setSource(info.workExp?.id)}\n                className={`${styles.section} ${info.workExp?.sectionTitle ? '' : styles.hidden}`}\n            >\n                <div className={styles.sectionTitle}>{info.workExp.sectionTitle}</div>\n                <div className={styles.content}>\n                    {info.workExp?.details?.map((item) => (\n                        <div className={styles.item} key={item.title}>\n                            {item.title ? <p className={styles.title}>{item.title}</p> : <span />}\n                            {item.companyName ? <p className={styles.subTitle}>{item.companyName}</p> : <span />}\n                            {item.certificationLink ? (\n                                <a className={styles.link} href={item.certificationLink}>\n                                    <Paperclip />\n                                    {item.certificationLink}\n                                </a>\n                            ) : (\n                                <span />\n                            )}\n                            {item.startDate && item.endDate ? (\n                                <div className={styles.date}>\n                                    <Calendar /> {getFormattedDate(item.startDate)}-{getFormattedDate(item.endDate)}\n                                </div>\n                            ) : (\n                                <div />\n                            )}\n                            {item.location ? (\n                                <p className={styles.date}>\n                                    <MapPin /> Remote\n                                </p>\n                            ) : (\n                                <span />\n                            )}\n                            {item.points?.length > 0 ? (\n                                <ul className={styles.points}>\n                                    {item.points?.map((elem, index) => (\n                                        <li className={styles.point} key={elem + index}>\n                                            {elem}\n                                        </li>\n                                    ))}\n                                </ul>\n                            ) : (\n                                <span />\n                            )}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        ),\n        // [sections.project]: (\n        //   <div\n        //     key={\"project\"}\n        //     draggable\n        //     onDragOver={() => seTarget(info.project?.id)}\n        //     onDragEnd={() => setSource(info.project?.id)}\n        //     className={`${styles.section} ${\n        //       info.project?.sectionTitle ? \"\" : styles.hidden\n        //     }`}\n        //   >\n        //     <div className={styles.sectionTitle}>{info.project.sectionTitle}</div>\n        //     <div className={styles.content}>\n        //       {info.project?.details?.map((item) => (\n        //         <div className={styles.item}>\n        //           {item.title ? (\n        //             <p className={styles.title}>{item.title}</p>\n        //           ) : (\n        //             <span />\n        //           )}\n        //           {item.link ? (\n        //             <a className={styles.link} href={item.link}>\n        //               <Paperclip />\n        //               {item.link}\n        //             </a>\n        //           ) : (\n        //             <span />\n        //           )}\n        //           {item.github ? (\n        //             <a className={styles.link} href={item.github}>\n        //               <GitHub />\n        //               {item.github}\n        //             </a>\n        //           ) : (\n        //             <span />\n        //           )}\n        //           {item.overview ? (\n        //             <p className={styles.overview}>{item.overview} </p>\n        //           ) : (\n        //             <span />\n        //           )}\n        //           {item.points?.length > 0 ? (\n        //             <ul className={styles.points}>\n        //               {item.points?.map((elem, index) => (\n        //                 <li className={styles.point} key={elem + index}>\n        //                   {elem}\n        //                 </li>\n        //               ))}\n        //             </ul>\n        //           ) : (\n        //             <span />\n        //           )}\n        //         </div>\n        //       ))}\n        //     </div>\n        //   </div>\n        // ),\n        [sections.education]: (\n            <div\n                key={'education'}\n                draggable\n                onDragOver={() => seTarget(info.education?.id)}\n                onDragEnd={() => setSource(info.education?.id)}\n                className={`${styles.section} ${info.education?.sectionTitle ? '' : styles.hidden}`}\n            >\n                <div className={styles.sectionTitle}>{info.education?.sectionTitle}</div>\n                <div className={styles.content}>\n                    {info.education?.details?.map((item) => (\n                        <div className={styles.item}>\n                            {item.title ? <p className={styles.title}>{item.title}</p> : <span />}\n                            {item.college ? <p className={styles.subTitle}>Some college name</p> : <span />}\n                            {item.startDate && item.endDate ? (\n                                <div className={styles.date}>\n                                    <Calendar /> {getFormattedDate(item.startDate)} -{getFormattedDate(item.endDate)}\n                                </div>\n                            ) : (\n                                ''\n                            )}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        ),\n        [sections.achievement]: (\n            <div\n                key={'achievement'}\n                draggable\n                onDragOver={() => seTarget(info.achievement?.id)}\n                onDragEnd={() => setSource(info.achievement?.id)}\n                className={`${styles.section} ${info.achievement?.sectionTitle ? '' : styles.hidden}`}\n            >\n                <div className={styles.sectionTitle}>{info.achievement?.sectionTitle}</div>\n                <div className={styles.content}>\n                    {info.achievement?.points?.length > 0 ? (\n                        <ul className={styles.numbered}>\n                            {info.achievement?.points?.map((elem, index) => (\n                                <li className={styles.point} key={elem + index}>\n                                    {elem}\n                                </li>\n                            ))}\n                        </ul>\n                    ) : (\n                        <span />\n                    )}\n                </div>\n            </div>\n        ),\n        [sections.summary]: (\n            <div\n                key={'summary'}\n                draggable\n                onDragOver={() => seTarget(info.summary?.id)}\n                onDragEnd={() => setSource(info.summary?.id)}\n                className={`${styles.section} ${info.summary?.sectionTitle ? '' : styles.hidden}`}\n            >\n                <div className={styles.sectionTitle}>{info.summary?.sectionTitle}</div>\n                <div className={styles.content}>\n                    <p className={styles.overview}>{info.summary?.detail}</p>\n                </div>\n            </div>\n        ),\n        [sections.other]: (\n            <div\n                key={'other'}\n                draggable\n                onDragOver={() => seTarget(info.other?.id)}\n                onDragEnd={() => setSource(info.other?.id)}\n                className={`${styles.section} ${info.other?.sectionTitle ? '' : styles.hidden}`}\n            >\n                <div className={styles.sectionTitle}>{info.other?.sectionTitle}</div>\n                <div className={styles.content}>\n                    <p className={styles.overview}>{info?.other?.detail}</p>\n                </div>\n            </div>\n        )\n    };\n\n    const swapSourceTarget = (source, target) => {\n        if (!source || !target) return;\n        const tempColumns = [[...columns[0]], [...columns[1]]];\n\n        let sourceRowIndex = tempColumns[0].findIndex((item) => item === source);\n        let sourceColumnIndex = 0;\n        if (sourceRowIndex < 0) {\n            sourceColumnIndex = 1;\n            sourceRowIndex = tempColumns[1].findIndex((item) => item === source);\n        }\n\n        let targetRowIndex = tempColumns[0].findIndex((item) => item === target);\n        let targetColumnIndex = 0;\n        if (targetRowIndex < 0) {\n            targetColumnIndex = 1;\n            targetRowIndex = tempColumns[1].findIndex((item) => item === target);\n        }\n\n        const tempSource = tempColumns[sourceColumnIndex][sourceRowIndex];\n        tempColumns[sourceColumnIndex][sourceRowIndex] = tempColumns[targetColumnIndex][targetRowIndex];\n\n        tempColumns[targetColumnIndex][targetRowIndex] = tempSource;\n\n        setColumns(tempColumns);\n    };\n\n    useEffect(() => {\n        setColumns([\n            [sections.education, sections.summary],\n            [sections.workExp, sections.achievement, sections.other]\n        ]);\n    }, []);\n\n    useEffect(() => {\n        swapSourceTarget(source, target);\n    }, [source]);\n\n    useEffect(() => {\n        const container = containerRef.current;\n        if (!props.activeColor || !container) return;\n\n        container.style.setProperty('--color', props.activeColor);\n    }, [props.activeColor]);\n\n    return (\n        <div ref={ref}>\n            <div ref={containerRef} className={styles.container}>\n                <div className={styles.header}>\n                    <p className={styles.heading}>{info.basicInfo?.detail?.name}</p>\n                    <p className={styles.subHeading}>{info.basicInfo?.detail?.title}</p>\n\n                    <div className={styles.links}>\n                        {info.basicInfo?.detail?.email ? (\n                            <a className={styles.link} href={`mailto:${info.basicInfo?.detail?.email}`}>\n                                <AtSign /> {info.basicInfo?.detail?.email}\n                            </a>\n                        ) : (\n                            <span />\n                        )}\n                        {/* {info.basicInfo?.detail?.phone ? (\n              <a className={styles.link}>\n                <Phone /> {info.basicInfo?.detail?.phone}\n              </a>\n            ) : (\n              <span />\n            )} */}\n                        {info.basicInfo?.detail?.linkedin ? (\n                            <a className={styles.link} href={info.basicInfo.detail.linkedin} target=\"_blank\" rel=\"noopener noreferrer\">\n                                <Linkedin /> {info.basicInfo?.detail?.linkedin}\n                            </a>\n                        ) : (\n                            <span />\n                        )}\n                        {info.basicInfo?.detail?.github ? (\n                            <button className={styles.link}>\n                                <GitHub /> {info.basicInfo?.detail?.github}\n                            </button>\n                        ) : (\n                            <span />\n                        )}\n                    </div>\n                </div>\n\n                <div className={styles.main}>\n                    <div className={styles.col1}>{columns[0].map((item) => sectionDiv[item])}</div>\n                    <div className={styles.col2}>{columns[1].map((item) => sectionDiv[item])}</div>\n                </div>\n            </div>\n        </div>\n    );\n});\n\nexport default Resume;\n","export const ques = [\n  \"What type of role are you interested in?\",\n  \"Have you worked in the technology industry before?\",\n  \"What are your core technical skills?\",\n  \"What is your leadership experience?\",\n  \"What programming languages are you proficient in?\",\n  \"What is your level of experience with Blockchain Development?\",\n  \"What is your preferred work location?\",\n  \"What is your salary expectation for this role?\",\n  \"Are you looking for a permanent or contract role?\",\n  \"When are you available to start a new role?\",\n  \"Do you have any experience with agile development methodologies?\",\n  \"What is your experience with DevOps?\",\n  \"What type of projects have you worked on in the past?\",\n  \"How do you stay up-to-date with the latest technology trends?\",\n  \"What is your level of experience with machine learning and artificial intelligence?\",\n  \"Have you worked with any specific technology platforms or frameworks?\",\n  \"Do you have any certifications related to technology?\",\n  \"Are you willing to relocate for a new role?\",\n  \"What is your level of experience with cloud computing?\",\n  \"What is your level of experience with data analytics?\",\n  \"What is your level of experience with cybersecurity?\",\n  \"What is your level of experience with mobile app development?\",\n  \"What is your level of experience with Cryptocurrency?\",\n  \"What is your current salary/daily rate/hourly rate?\",\n  \"What are your salary/daily rate/hourly rate expectations?\",\n];\n","import React, { createRef, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\nimport { ques } from \"./ques\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { TextField } from \"@mui/material\";\n\nconst ChatBot = ({ chatbotAnswers, setchatbotAnswers, setOpen, open, handleClose, handleOpen, ref, image }) => {\n  const handleInputChange = (e, que) => {\n    e.preventDefault();\n    if (e.target.value.length == 0) {\n      delete chatbotAnswers[que];\n    } else {\n      setchatbotAnswers({ ...chatbotAnswers, [que]: e.target.value });\n    }\n  };\n\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"80%\",\n    bgcolor: \"background.paper\",\n    boxShadow: 24,\n    p: 4,\n    height: \"90%\",\n    justifyContent: \"space-evenly\",\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    overflow: \"scroll\",\n  };\n\n  return (\n    <>\n      {/* <div>\n        <button style={{ marginBottom: \"10px\" }} onClick={getImage}>\n          Take screenshot\n        </button>\n      </div> */}\n      {/* <img width={\"100px\"} src={image} alt={\"Screenshot\"} />\n      <Button onClick={handleOpen}>Open modal</Button> */}\n      <Modal\n        open={open}\n        // onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          {ques.map((que) => (\n            <TextField\n              sx={{ m: 1, width: \"50ch\" }}\n              onChange={(e) => handleInputChange(e, que)}\n              id=\"outlined-basic\"\n              label={`${que}`}\n              variant=\"filled\"\n              size=\"small\"\n              margin=\"normal\"\n              value={chatbotAnswers[que]}\n            />\n          ))}\n          <Button onClick={handleClose} sx={{ width: \"100px\", backgroundColor: \"rgb(94,53,177)\" }} variant=\"contained\">\n            Save\n          </Button>\n        </Box>\n      </Modal>\n    </>\n  );\n};\n\nexport default ChatBot;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useRef, useState, createRef } from \"react\";\r\nimport InputControl from \"../InputControl/InputControl\";\r\nimport styles from \"./Create.module.css\";\r\nimport { X } from \"react-feather\";\r\nimport Resume from \"../Resume/Resume\";\r\nimport { contractadd, contractabi } from \"../ConnectWallet/contractinfo\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { ethers } from \"ethers\";\r\nimport LiveDisplay from \"../LiveDisplay/LiveDisplay\";\r\nimport ChatBot from \"./chatBot/ChatBot\";\r\nimport { create } from \"ipfs-http-client\";\r\nimport { useScreenshot } from \"use-react-screenshot\";\r\nimport { Button, List, ListItem, TextField } from \"@mui/material\";\r\nconst Create = () => {\r\n  const [values, setValues] = useState({\r\n    // pers details\r\n    persdetName: \"\",\r\n    persdetAddress: \"\",\r\n    persdetEmail: \"\",\r\n    persdetPhone: \"\",\r\n\r\n    // work exp\r\n    jobTitle: \"\",\r\n    companyName: \"\",\r\n    companyLocation: \"\",\r\n    companystartDate: \"\",\r\n    companyendDate: \"\",\r\n    achvResp: \"\", // need to look at this one\r\n\r\n    // education\r\n    SchoolorcollegeName: \"\",\r\n    SchoolorcollegeDesc: \"\",\r\n    SchoolorcollegestartDate: \"\",\r\n    SchoolorcollegeEndDate: \"\",\r\n\r\n    // achievementsBody\r\n    hobbies: \"\", // need to look at this one\r\n\r\n    summary: \"\",\r\n\r\n    OtherkeysSkills: \"\",\r\n    personalStatement: \"\",\r\n  });\r\n  const { account, active, library } = useWeb3React();\r\n\r\n  //CODE BLOCK FOR CHATBOX///////////////////////////////////////////////////////////\r\n\r\n  const projectId = \"2Ne3Tz73itt94vQ4ZhEInyiRQz3\";\r\n  const projectSecret = \"199219aedb4bde3b5a6542fba994d4e6\";\r\n  const authorization = \"Basic \" + btoa(projectId + \":\" + projectSecret);\r\n\r\n  const ipfs = create({\r\n    url: \"https://ipfs.infura.io:5001\",\r\n    headers: {\r\n      authorization,\r\n    },\r\n  });\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = async () => {\r\n    try {\r\n      setOpen(false);\r\n      console.log({ values });\r\n      await takeScreenshot(ref1.current);\r\n      // await takeScreenshot2(liveDataRef.current);\r\n      // await getLiveDataImage()\r\n      const resultqna = await ipfs.add(image);\r\n      // const resultcv = await ipfs.add(image2);\r\n      await console.log(\"result\", resultqna);\r\n      const pathqna = await resultqna.path.replace(/\"|'/g, \"\");\r\n      const urlqna = `https://raghav.infura-ipfs.io/ipfs/${pathqna}`;\r\n\r\n      console.log(urlqna);\r\n\r\n      // const pathcv = await resultcv.path.replace(/\"|'/g, \"\");\r\n      // const urlcv = `https://raghav.infura-ipfs.io/ipfs/${pathcv}`;\r\n      // console.log(urlcv);\r\n      !active && alert(\"Connect wallet\");\r\n\r\n      const signer = await library?.getSigner(account);\r\n      const cont = await new ethers.Contract(contractadd, contractabi, signer);\r\n      console.log({ cont });\r\n\r\n      const {\r\n        persdetName,\r\n        persdetAddress,\r\n        persdetEmail,\r\n        persdetPhone,\r\n        jobTitle,\r\n        companyName,\r\n        companyLocation,\r\n        companystartDate,\r\n        companyendDate,\r\n        achvResp, // need to look at this one\r\n        SchoolorcollegeName,\r\n        SchoolorcollegeDesc,\r\n        SchoolorcollegestartDate,\r\n        SchoolorcollegeEndDate,\r\n        hobbies, // need to look at this one\r\n        summary,\r\n        OtherkeysSkills,\r\n        personalStatement,\r\n      } = values;\r\n\r\n      const companystartDateUnix = Math.round(new Date(companystartDate).getTime() / 1000).toString();\r\n      const companyendDateUnix = Math.round(new Date(companyendDate).getTime() / 1000).toString();\r\n\r\n      const SchoolorcollegestartDateUnix = Math.round(new Date(SchoolorcollegestartDate).getTime() / 1000).toString();\r\n      const SchoolorcollegeEndDateUnix = Math.round(new Date(SchoolorcollegeEndDate).getTime() / 1000).toString();\r\n\r\n      console.log({ companystartDateUnix });\r\n      const PersDetails = [\r\n        persdetName,\r\n        account,\r\n        persdetEmail,\r\n        persdetPhone,\r\n        personalStatement,\r\n        OtherkeysSkills,\r\n        hobbies,\r\n        summary,\r\n      ];\r\n      const Employement = [jobTitle, companyName, companyLocation, companystartDateUnix, companyendDateUnix, achvResp];\r\n      const Education = [\r\n        SchoolorcollegeName,\r\n        SchoolorcollegestartDateUnix,\r\n        SchoolorcollegeEndDateUnix,\r\n        SchoolorcollegeDesc,\r\n      ];\r\n\r\n      console.log({ PersDetails, Employement, Education });\r\n\r\n      // const qna = [chatbotAnswers, \"\"];\r\n\r\n      const createCall = await cont.inputCvDet(PersDetails, Employement, Education, urlqna, [[chatbotAnswers], urlqna]);\r\n      await createCall.wait();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const getLiveDataImage = async () => {\r\n    await takeScreenshot2(liveDataRef.current);\r\n  };\r\n\r\n  const ref1 = createRef(null);\r\n  const liveDataRef = createRef(null);\r\n  const [image, takeScreenshot] = useScreenshot();\r\n  const [image2, takeScreenshot2] = useScreenshot();\r\n  const getImage = () => takeScreenshot(ref1.current);\r\n  const [chatbotAnswers, setchatbotAnswers] = useState([]);\r\n\r\n  //CODE BLOCK FOR CHATBOX///////////////////////////////////////////////////////////\r\n\r\n  const sections = {\r\n    basicInfo: \"Personal Details\",\r\n    workExp: \"Employement\",\r\n\r\n    education: \"Education\",\r\n    achievement: \"Hobbies\",\r\n    summary: \"Reference\",\r\n    other: \"Others\",\r\n  };\r\n\r\n  const [activeSectionIndex, setActiveSectionIndex] = useState(0);\r\n  const [activeSectionKey, setActiveSectionKey] = useState(Object.keys(sections)[0]);\r\n\r\n  const nextSection = () => {\r\n    let sec = activeSectionIndex + 1;\r\n    setActiveSectionKey(Object.keys(sections)[sec]);\r\n    setSectionTitle(Object.keys(sections)[sec]);\r\n    setActiveSectionIndex(sec);\r\n  };\r\n\r\n  const [sectionTitle, setSectionTitle] = useState(sections[Object.keys(sections)[0]]);\r\n\r\n  const handlePointUpdate = (value, index) => {\r\n    const tempValues = { ...values };\r\n    if (!Array.isArray(tempValues.points)) tempValues.points = [];\r\n    tempValues.points[index] = value;\r\n    setValues(tempValues);\r\n  };\r\n\r\n  const handleSubmission = async () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  // forms\r\n  const basicInfoBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Name\"\r\n          placeholder=\"Enter your full\"\r\n          value={values.persdetName}\r\n          onChange={(event) => {\r\n            setValues((prev) => ({ ...prev, persdetName: event.target.value }));\r\n          }}\r\n        />\r\n        <InputControl\r\n          label=\"Address\"\r\n          value={account}\r\n          placeholder=\"\"\r\n          onChange={(event) => setValues((prev) => ({ ...prev, persdetAddress: event.target.value }))}\r\n          disabled\r\n        />\r\n      </div>\r\n\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Email\"\r\n          value={values.persdetEmail}\r\n          placeholder=\"Enter your email\"\r\n          onChange={(event) => setValues((prev) => ({ ...prev, persdetEmail: event.target.value }))}\r\n        />\r\n        <InputControl\r\n          label=\"Enter phone\"\r\n          value={values.persdetPhone}\r\n          placeholder=\"Enter your phone number\"\r\n          onChange={(event) => setValues((prev) => ({ ...prev, persdetPhone: event.target.value }))}\r\n        />\r\n      </div>\r\n\r\n      <div style={{ display: \"flex\", justifyContent: \"space-evenly\", alignItems: \"left\" }}>\r\n        <button type=\"button\" onClick={nextSection}>\r\n          next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const workExpBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Job Title\"\r\n          placeholder=\"Enter job title \"\r\n          value={values.jobTitle}\r\n          onChange={(event) => setValues((prev) => ({ ...prev, jobTitle: event.target.value }))}\r\n        />\r\n        <InputControl\r\n          label=\"Company Name\"\r\n          placeholder=\"Enter company name\"\r\n          value={values.companyName}\r\n          onChange={(event) => setValues((prev) => ({ ...prev, companyName: event.target.value }))}\r\n        />\r\n      </div>\r\n\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Location\"\r\n          placeholder=\"Enter company location\"\r\n          value={values.companyLocation}\r\n          onChange={(event) => setValues((prev) => ({ ...prev, companyLocation: event.target.value }))}\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Start Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter start date of work\"\r\n          value={values.companystartDate}\r\n          onChange={(event) => setValues((prev) => ({ ...prev, companystartDate: event.target.value }))}\r\n        />\r\n        <InputControl\r\n          label=\"End Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter end date of work\"\r\n          value={values.companyendDate}\r\n          onChange={(event) => setValues((prev) => ({ ...prev, companyendDate: event.target.value }))}\r\n        />\r\n      </div>\r\n\r\n      <div className={styles.column}>\r\n        <label>Achievements and Responsibilities</label>\r\n        <InputControl\r\n          placeholder=\"Describe your achievements and responsibilities\"\r\n          value={values.achvResp}\r\n          onChange={(event) => setValues((prev) => ({ ...prev, achvResp: event.target.value }))}\r\n        />\r\n      </div>\r\n\r\n      <div style={{ display: \"flex\", justifyContent: \"space-evenly\", alignItems: \"left\" }}>\r\n        <button type=\"button\" onClick={nextSection}>\r\n          next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const educationBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        {/* <InputControl\r\n              label=\"Description\"\r\n              value={values.title}\r\n              placeholder=\"Enter description\"\r\n              onChange={(event) =>\r\n                setValues((prev) => ({ ...prev, title: event.target.value }))\r\n              }\r\n            /> */}\r\n        <InputControl\r\n          label=\"College/School Name\"\r\n          value={values.SchoolorcollegeName}\r\n          placeholder=\"Enter college/school name\"\r\n          onChange={(event) => setValues((prev) => ({ ...prev, SchoolorcollegeName: event.target.value }))}\r\n        />\r\n      </div>\r\n      <InputControl\r\n        label=\"Description\"\r\n        value={values.SchoolorcollegeDesc}\r\n        placeholder=\"Enter description\"\r\n        onChange={(event) => setValues((prev) => ({ ...prev, SchoolorcollegeDesc: event.target.value }))}\r\n      />\r\n\r\n      {/* <InputControl\r\n            label=\"College/School Name\"\r\n            value={values.college}\r\n            placeholder=\"Enter college/school name\"\r\n            onChange={(event) =>\r\n              setValues((prev) => ({ ...prev, college: event.target.value }))\r\n            }\r\n          /> */}\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Start Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter start date of this education\"\r\n          value={values.SchoolorcollegestartDate}\r\n          onChange={(event) => setValues((prev) => ({ ...prev, SchoolorcollegestartDate: event.target.value }))}\r\n        />\r\n        <InputControl\r\n          label=\"End Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter end date of this education\"\r\n          value={values.SchoolorcollegeEndDate}\r\n          onChange={(event) => setValues((prev) => ({ ...prev, SchoolorcollegeEndDate: event.target.value }))}\r\n        />\r\n      </div>\r\n\r\n      <div style={{ display: \"flex\", justifyContent: \"space-evenly\", alignItems: \"left\" }}>\r\n        <button type=\"button\" onClick={nextSection}>\r\n          next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const achievementsBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.column}>\r\n        <label> Your Hobbies</label>\r\n        <InputControl\r\n          placeholder=\"Enter Your Hobbies\"\r\n          value={values.hobbies}\r\n          onChange={(event) => setValues((prev) => ({ ...prev, hobbies: event.target.value }))}\r\n        />\r\n      </div>\r\n\r\n      <div style={{ display: \"flex\", justifyContent: \"space-evenly\", alignItems: \"left\" }}>\r\n        <button type=\"button\" onClick={nextSection}>\r\n          next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const summaryBody = (\r\n    <div className={styles.detail}>\r\n      <InputControl\r\n        label=\"Summary\"\r\n        value={values.summary}\r\n        placeholder=\"Enter your Reference\"\r\n        onChange={(event) => setValues((prev) => ({ ...prev, summary: event.target.value }))}\r\n      />\r\n      <div style={{ display: \"flex\", justifyContent: \"space-evenly\", alignItems: \"left\" }}>\r\n        <button type=\"button\" onClick={nextSection}>\r\n          next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const otherBody = (\r\n    <div className={styles.detail}>\r\n      <InputControl\r\n        label=\"Key Skills\"\r\n        value={values.OtherkeysSkills}\r\n        placeholder=\"Enter key skills\"\r\n        onChange={(event) => setValues((prev) => ({ ...prev, OtherkeysSkills: event.target.value }))}\r\n      />\r\n      <InputControl\r\n        label=\"Personal Statement\"\r\n        value={values.personalStatement}\r\n        placeholder=\"Enter personal statement\"\r\n        onChange={(event) => setValues((prev) => ({ ...prev, personalStatement: event.target.value }))}\r\n      />\r\n\r\n      <div style={{ display: \"flex\", justifyContent: \"space-evenly\", alignItems: \"left\" }}>\r\n        <button type=\"button\" onClick={handleSubmission}>\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const generateBody = () => {\r\n    switch (sections[activeSectionKey]) {\r\n      case sections.basicInfo:\r\n        return basicInfoBody;\r\n      case sections.workExp:\r\n        return workExpBody;\r\n\r\n      case sections.education:\r\n        return educationBody;\r\n      case sections.achievement:\r\n        return achievementsBody;\r\n      case sections.summary:\r\n        return summaryBody;\r\n      case sections.other:\r\n        return otherBody;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const resumeRef = useRef();\r\n\r\n  const [resumeInformation, setResumeInformation] = useState({\r\n    [sections.basicInfo]: {\r\n      id: sections.basicInfo,\r\n      sectionTitle: sections.basicInfo,\r\n      detail: {},\r\n    },\r\n    [sections.workExp]: {\r\n      id: sections.workExp,\r\n      sectionTitle: sections.workExp,\r\n      details: [],\r\n    },\r\n    // [sections.project]: {\r\n    //   id: sections.project,\r\n    //   sectionTitle: sections.project,\r\n    //   details: [],\r\n    // },\r\n    [sections.education]: {\r\n      id: sections.education,\r\n      sectionTitle: sections.education,\r\n      details: [],\r\n    },\r\n    [sections.achievement]: {\r\n      id: sections.achievement,\r\n      sectionTitle: sections.achievement,\r\n      points: [],\r\n    },\r\n    [sections.summary]: {\r\n      id: sections.summary,\r\n      sectionTitle: sections.summary,\r\n      detail: \"\",\r\n    },\r\n    [sections.other]: {\r\n      id: sections.other,\r\n      sectionTitle: sections.other,\r\n      detail: \"\",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-xl-6\">\r\n            <div className={`border rounded ${styles.container}`}>\r\n              <div className={styles.header}>\r\n                {Object.keys(sections)?.map((key, index) => (\r\n                  // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\r\n                  <div\r\n                    className={`${styles.section} ${activeSectionKey === key ? styles.active : \"\"}`}\r\n                    key={key}\r\n                    onClick={() => {\r\n                      setActiveSectionKey(key);\r\n                      setSectionTitle(key);\r\n                      setActiveSectionIndex(index);\r\n                    }}\r\n                  >\r\n                    {sections[key]}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              <div className={styles.body}>\r\n                <InputControl\r\n                  label=\"Section\"\r\n                  placeholder=\"Enter section title\"\r\n                  value={sectionTitle}\r\n                  onChange={(event) => setSectionTitle(event.target.value)}\r\n                  disabled\r\n                />\r\n\r\n                {/* <div className={styles.chips}>\r\n                {activeInformation?.details\r\n                  ? activeInformation?.details?.map((item, index) => (\r\n                      <div\r\n                        className={`${styles.chip} ${\r\n                          activeDetailIndex === index ? styles.active : \"\"\r\n                        }`}\r\n                        key={item.title + index}\r\n                        onClick={() => setActiveDetailIndex(index)}\r\n                      >\r\n                        <p>\r\n                          {sections[activeSectionKey]} {index + 1}\r\n                        </p>\r\n                        <X\r\n                          onClick={(event) => {\r\n                            event.stopPropagation();\r\n                            handleDeleteDetail(index);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    ))\r\n                  : \"\"}\r\n              </div> */}\r\n\r\n                {generateBody()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12 col-xl-6\">\r\n            <ChatBot\r\n              handleClose={handleClose}\r\n              handleOpen={handleOpen}\r\n              open={open}\r\n              setOpen={setOpen}\r\n              image={image}\r\n              chatbotAnswers={chatbotAnswers}\r\n              setchatbotAnswers={setchatbotAnswers}\r\n            />\r\n            <div ref={ref1}>\r\n              <h2>Answered questions:</h2>\r\n              <List>\r\n                {Object.keys(chatbotAnswers).map((key) => (\r\n                  <ListItem>\r\n                    <TextField\r\n                      sx={{ m: 1, width: \"50ch\" }}\r\n                      id=\"outlined-basic\"\r\n                      label={`${key}`}\r\n                      variant=\"filled\"\r\n                      size=\"small\"\r\n                      value={chatbotAnswers[key]}\r\n                      margin=\"normal\"\r\n                    />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </div>\r\n            {/* <img width={\"100px\"} src={image2} alt={\"Screenshot\"} /> */}\r\n            <div>\r\n              <div ref={liveDataRef}>\r\n                <LiveDisplay values={values} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* <Resume ref={resumeRef} sections={sections} information={resumeInformation} /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n"],"names":["ques","chatbotAnswers","setchatbotAnswers","setOpen","open","handleClose","handleOpen","ref","image","Modal","Box","sx","position","top","left","transform","width","bgcolor","boxShadow","p","height","justifyContent","display","flexWrap","overflow","map","que","TextField","m","onChange","e","preventDefault","target","value","length","handleInputChange","id","label","variant","size","margin","Button","onClick","backgroundColor","values","setValues","useState","persdetName","persdetAddress","persdetEmail","persdetPhone","jobTitle","companyName","companyLocation","companystartDate","companyendDate","achvResp","SchoolorcollegeName","SchoolorcollegeDesc","SchoolorcollegestartDate","SchoolorcollegeEndDate","hobbies","summary","OtherkeysSkills","personalStatement","account","active","library","useWeb3React","authorization","btoa","projectId","ipfs","create","url","headers","React","ref1","createRef","liveDataRef","takeScreenshot","useScreenshot","image2","takeScreenshot2","sections","basicInfo","workExp","education","achievement","other","activeSectionIndex","setActiveSectionIndex","activeSectionKey","setActiveSectionKey","Object","keys","nextSection","sec","setSectionTitle","sectionTitle","basicInfoBody","className","styles","InputControl","placeholder","event","prev","disabled","style","alignItems","type","workExpBody","educationBody","achievementsBody","summaryBody","otherBody","async","resumeInformation","setResumeInformation","useRef","detail","details","points","key","index","generateBody","console","log","current","resultqna","add","urlqna","path","replace","alert","signer","getSigner","cont","ethers","contractadd","contractabi","companystartDateUnix","Math","round","Date","getTime","toString","companyendDateUnix","SchoolorcollegestartDateUnix","SchoolorcollegeEndDateUnix","PersDetails","Employement","Education","createCall","inputCvDet","wait","error","List","ListItem","LiveDisplay"],"sourceRoot":""}